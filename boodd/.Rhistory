}
# compute the Bootstrap distribution of mean and variance of the mean
resb=boots(X,mv,B=999)
plot(ecdf(tboot_dist(resb,1)),do.points=FALSE)
setwd("C:/Users/Piotr/Desktop/R/boodd/boodd")
library(boodd)
source("C:/Users/Piotr/Desktop/R/tboot_dist.R")
set.seed(54321);
m=0
n=40;
X=exp(rnorm(n,mean=m));
mv=function(X){
c(mean(X),(n-1)*var(X)/n**2)}
truemean=exp(m+1/2)
truevar=exp(2*m+1)*(exp(1)-1)
truek3=(exp(1)+2)*sqrt(exp(1)-1)
# generate a Monte-Calo approximation of the true distribution of the t
dt=c()
for (i in 1:9999){
X0=exp(rnorm(n,mean=m))
est=mv(X0);
dt[i]=(est[1]-truemean)/sqrt(est[2])
}
# compute the Bootstrap distribution of mean and variance of the mean
resb=boots(X,mv,B=999)
# edge is the edgeworth expansion for the t-distribution of the mean
edge=function(x){ pnorm(x)+truek3/6*(2*x**2+1)*dnorm(x)/sqrt(n)}
plot(ecdf(tboot_dist(resb,1)),do.points=FALSE)
# add the plot of true distribution in blue
plot(ecdf(dt),add=TRUE, col=”blue”)
# add the plot of true distribution in blue
plot(ecdf(dt),add=TRUE, col="blue")
# add the Edgeworth expansion in green
curve(edge(x),from=-4,to=4,add=TRUE,col="green")
# add the normal approximation in red
curve(pnorm(x),from=-4,to=4,add=TRUE,col="red")
# Create the plots
par(mar = c(5, 4, 4, 2) + 0.1)  # Adjust margins
plot(ecdf(tboot_dist(resb, 1)), do.points = FALSE, main = "ECDF Plot", xlab = "Value", ylab = "ECDF", col = "black", lwd = 2)
plot(ecdf(dt), add = TRUE, col = "blue", lwd = 2)
curve(edge(x), from = -4, to = 4, add = TRUE, col = "green", lwd = 2)
curve(pnorm(x), from = -4, to = 4, add = TRUE, col = "red", lwd = 2)
legend("bottomright", legend = c("tboot_dist", "True distribution", "Edgeworth expansion", "Normal approximation"), col = c("black", "blue", "green", "red"), lty = 1, lwd = 2)
?legend
# Create the plots
par(mar = c(5, 5, 4, 2) + 0.1)  # Adjust margins
plot(ecdf(tboot_dist(resb, 1)), do.points = FALSE, main = "ECDF Plot", xlab = "Value", ylab = "ECDF", col = "black", lwd = 2)
plot(ecdf(dt), add = TRUE, col = "blue", lwd = 2)
curve(edge(x), from = -4, to = 4, add = TRUE, col = "green", lwd = 2)
curve(pnorm(x), from = -4, to = 4, add = TRUE, col = "red", lwd = 2)
legend("topleft", legend = c("tboot_dist", "True distribution", "Edgeworth expansion", "Normal approximation"), col = c("black", "blue", "green", "red"), lty = 1, lwd = 2)
# Create the plots
par(mar = c(7, 7, 4, 2) + 0.1)  # Adjust margins
plot(ecdf(tboot_dist(resb, 1)), do.points = FALSE, main = "ECDF Plot", xlab = "Value", ylab = "ECDF", col = "black", lwd = 2)
plot(ecdf(dt), add = TRUE, col = "blue", lwd = 2)
curve(edge(x), from = -4, to = 4, add = TRUE, col = "green", lwd = 2)
curve(pnorm(x), from = -4, to = 4, add = TRUE, col = "red", lwd = 2)
legend("topleft", legend = c("tboot_dist", "True distribution", "Edgeworth expansion", "Normal approximation"), col = c("black", "blue", "green", "red"), lty = 1, lwd = 2)
# Create the plots
par(mar = c(7, 7, 5, 2) + 0.1)  # Adjust margins
plot(ecdf(tboot_dist(resb, 1)), do.points = FALSE, main = "ECDF Plot", xlab = "Value", ylab = "ECDF", col = "black", lwd = 2)
plot(ecdf(dt), add = TRUE, col = "blue", lwd = 2)
curve(edge(x), from = -4, to = 4, add = TRUE, col = "green", lwd = 2)
curve(pnorm(x), from = -4, to = 4, add = TRUE, col = "red", lwd = 2)
legend("topleft", legend = c("tboot_dist", "True distribution", "Edgeworth expansion", "Normal approximation"), col = c("black", "blue", "green", "red"), lty = 1, lwd = 2)
# Create the plots
par(mar = c(7, 7, 7, 4) + 0.1)  # Adjust margins
plot(ecdf(tboot_dist(resb, 1)), do.points = FALSE, main = "ECDF Plot", xlab = "Value", ylab = "ECDF", col = "black", lwd = 2)
plot(ecdf(dt), add = TRUE, col = "blue", lwd = 2)
curve(edge(x), from = -4, to = 4, add = TRUE, col = "green", lwd = 2)
curve(pnorm(x), from = -4, to = 4, add = TRUE, col = "red", lwd = 2)
legend("topleft", legend = c("tboot_dist", "True distribution", "Edgeworth expansion", "Normal approximation"), col = c("black", "blue", "green", "red"), lty = 1, lwd = 2)
# Create the plots
par(mar = c(5, 5, 4, 2) + 0.1)  # Adjust margins
plot(ecdf(tboot_dist(resb, 1)), do.points = FALSE, main = "", xlab = "", ylab = "", col = "black", lwd = 2)
plot(ecdf(dt), add = TRUE, col = "blue", lwd = 2, lty = 2)
curve(edge(x), from = -4, to = 4, add = TRUE, col = "green", lwd = 2, lty = 2)
curve(pnorm(x), from = -4, to = 4, add = TRUE, col = "red", lwd = 2, lty = 2)
legend("topleft", legend = c("tboot_dist", "True distribution", "Edgeworth expansion", "Normal approximation"), col = c("black", "blue", "green", "red"), lty = c(1, 2, 2, 2), lwd = 2, cex = 0.8)
curve(ecdf(dt), add = TRUE, col = "blue", lwd = 2, lty = 2)
plot(ecdf(tboot_dist(resb, 1)), do.points = FALSE, main = "", xlab = "", ylab = "", col = "black", lwd = 2,ylim = c(0, 1.2))
plot(ecdf(dt), add = TRUE, col = "blue", lwd = 2, lty = 2)
curve(edge(x), from = -4, to = 4, add = TRUE, col = "green", lwd = 2, lty = 2)
curve(pnorm(x), from = -4, to = 4, add = TRUE, col = "red", lwd = 2, lty = 2)
legend("topleft", legend = c("tboot_dist", "True distribution", "Edgeworth expansion", "Normal approximation"), col = c("black", "blue", "green", "red"), lty = c(1, 2, 2, 2), lwd = 2, cex = 0.8)
plot(ecdf(tboot_dist(resb, 1)), do.points = FALSE, main = "", xlab = "", ylab = "", col = "black", lwd = 2,ylim = c(0, 1.1))
plot(ecdf(dt), add = TRUE, col = "blue", lwd = 2, lty = 2)
curve(edge(x), from = -4, to = 4, add = TRUE, col = "green", lwd = 2, lty = 2)
curve(pnorm(x), from = -4, to = 4, add = TRUE, col = "red", lwd = 2, lty = 2)
legend("topleft", legend = c("tboot_dist", "True distribution", "Edgeworth expansion", "Normal approximation"), col = c("black", "blue", "green", "red"), lty = c(1, 2, 2, 2), lwd = 2, cex = 0.8)
plot(ecdf(tboot_dist(resb, 1)), do.points = FALSE, main = "", xlab = "", ylab = "", col = "black", lwd = 2,ylim = c(0, 1.1))
plot(ecdf(dt), add = TRUE, col = "blue", lwd = 2, lty = 2)
curve(edge(x), from = -4, to = 4, add = TRUE, col = "green", lwd = 2)
curve(pnorm(x), from = -4, to = 4, add = TRUE, col = "red", lwd = 2)
# Create the plots
par(mar = c(5, 5, 4, 2) + 0.1)  # Adjust margins
plot(ecdf(tboot_dist(resb, 1)), do.points = FALSE, main = "", xlab = "", ylab = "", col = "black", lwd = 2,ylim = c(0, 1.1))
plot(ecdf(dt), add = TRUE, col = "blue", lwd = 2, lty = 1)
curve(edge(x), from = -4, to = 4, add = TRUE, col = "green", lwd = 1)
curve(pnorm(x), from = -4, to = 4, add = TRUE, col = "red", lwd = 1)
# Create the plots
par(mar = c(5, 5, 4, 2) + 0.1)  # Adjust margins
plot(ecdf(tboot_dist(resb, 1)), do.points = FALSE, main = "", xlab = "", ylab = "", col = "black", lwd = 2,ylim = c(0, 1.1))
plot(ecdf(dt), add = TRUE, col = "blue", lwd = 2, lty = 1.7)
curve(edge(x), from = -4, to = 4, add = TRUE, col = "green", lwd = 1.7)
curve(pnorm(x), from = -4, to = 4, add = TRUE, col = "red", lwd = 1.7)
# Create the plots
par(mar = c(5, 5, 4, 2) + 0.1)  # Adjust margins
plot(ecdf(tboot_dist(resb, 1)), do.points = FALSE, main = "", xlab = "", ylab = "", col = "black", lwd = 2,ylim = c(0, 1.1))
plot(ecdf(dt), add = TRUE, col = "blue", lwd = 2, lty = 2)
curve(edge(x), from = -4, to = 4, add = TRUE, col = "green", lwd = 2)
curve(pnorm(x), from = -4, to = 4, add = TRUE, col = "red", lwd = 2)
legend("topleft", legend = c("tboot_dist", "True distribution", "Edgeworth expansion", "Normal approximation"), col = c("black", "blue", "green", "red"), lty = c(1, 2, 2, 2), lwd = 2, cex = 0.8)
legend("topleft", legend = c("tboot_dist", "True distribution", "Edgeworth expansion", "Normal approximation"), col = c("black", "blue", "green", "red"), lty = c(1, 1,1,1), lwd = 2, cex = 0.8)
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Create a data frame for each line
tboot_df <- data.frame(x = resb$t, type = "tboot_dist")
# Create a data frame for each line
tboot_df <- data.frame(x = resb$t, type = "tboot_dist")
dt_df <- data.frame(x = dt, type = "True distribution")
edge_df <- data.frame(x = seq(-4, 4, by = 0.01))
edge_df$y <- edge(edge_df$x)
edge_df$type <- "Edgeworth expansion"
pnorm_df <- data.frame(x = seq(-4, 4, by = 0.01))
pnorm_df$y <- pnorm(pnorm_df$x)
pnorm_df$type <- "Normal approximation"
# Combine data frames
all_df <- rbind(tboot_df, dt_df) %>%
mutate(y = ecdf(x)(x))
curve_df <- rbind(edge_df, pnorm_df)
# Create ggplot
ggplot() +
geom_step(data = all_df, aes(x = x, y = y, col = type, linetype = type), size = 1) +
geom_line(data = curve_df, aes(x = x, y = y, col = type, linetype = type), size = 1) +
scale_color_manual(values = c("black", "blue", "green", "red")) +
scale_linetype_manual(values = c("solid", "dashed", "dashed", "dashed")) +
labs(title = "ECDF Plot", x = "Value", y = "ECDF") +
theme_minimal() +
theme(legend.title = element_blank(), legend.position = "bottomright")
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Create a data frame for each line
tboot_df <- data.frame(x = resb$t, type = "tboot_dist")
# Calculate t-bootstrap distribution values
tboot_values <- tboot_dist(resb, 1, PLT = FALSE)
# Create a data frame for each line
tboot_df <- data.frame(x = tboot_values, type = "tboot_dist")
dt_df <- data.frame(x = dt, type = "True distribution")
edge_df <- data.frame(x = seq(-4, 4, by = 0.01))
edge_df$y <- edge(edge_df$x)
edge_df$type <- "Edgeworth expansion"
pnorm_df <- data.frame(x = seq(-4, 4, by = 0.01))
pnorm_df$y <- pnorm(pnorm_df$x)
pnorm_df$type <- "Normal approximation"
# Combine data frames
all_df <- rbind(tboot_df, dt_df) %>%
mutate(y = ecdf(x)(x))
curve_df <- rbind(edge_df, pnorm_df)
# Create ggplot
ggplot() +
geom_step(data = all_df, aes(x = x, y = y, col = type, linetype = type), size = 1) +
geom_line(data = curve_df, aes(x = x, y = y, col = type, linetype = type), size = 1) +
scale_color_manual(values = c("black", "blue", "green", "red")) +
scale_linetype_manual(values = c("solid", "dashed", "dashed", "dashed")) +
labs(title = "ECDF Plot", x = "Value", y = "ECDF") +
theme_minimal() +
theme(legend.title = element_blank(), legend.position = "bottomright")
# Create ggplot
ggplot() +
geom_step(data = all_df, aes(x = x, y = y, col = type, linetype = type), size = 1) +
geom_line(data = curve_df, aes(x = x, y = y, col = type, linetype = type), size = 1) +
scale_color_manual(values = c("black", "blue", "green", "red")) +
scale_linetype_manual(values = c("solid", "dashed", "dashed", "dashed")) +
labs(title = "ECDF Plot", x = "Value", y = "ECDF") +
guides(col = guide_legend(title = NULL, override.aes = list(size = 1.5))) +
theme_minimal() +
theme(legend.title = element_blank(),
legend.position = "bottomright",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_hline(yintercept = 1, linetype = "dotted", color = "black", size = 1)
# Create ggplot
ggplot() +
geom_step(data = all_df, aes(x = x, y = y, col = type, linetype = type), size = 1) +
geom_line(data = curve_df, aes(x = x, y = y, col = type, linetype = type), size = 1) +
scale_color_manual(values = c("black", "blue", "green", "red")) +
scale_linetype_manual(values = c("solid", "dashed", "dashed", "dashed")) +
labs(title = "ECDF Plot", x = "Value", y = "ECDF") +
guides(col = guide_legend(title = NULL, override.aes = list(size = 1.5))) +
theme(legend.title = element_blank(),
legend.position = "bottomright",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_hline(yintercept = 1, linetype = "dotted", color = "black", size = 1)
# Create ggplot
ggplot() +
geom_step(data = all_df, aes(x = x, y = y, col = type, linetype = type), size = 1) +
geom_line(data = curve_df, aes(x = x, y = y, col = type, linetype = type), size = 1) +
scale_color_manual(values = c("black", "blue", "green", "red")) +
scale_linetype_manual(values = c("solid", "dashed", "dashed", "dashed")) +
labs(title = "ECDF Plot", x = "Value", y = "ECDF") +
theme_bw() +
theme(legend.title = element_blank(),
legend.position = "bottomright",
legend.key.size = unit(1.2, "lines"),
legend.text = element_text(size = 9)) +
geom_hline(yintercept = 1, linetype = "dotted", color = "black", size = 1)
# Create ggplot
ggplot(data = all_df, aes(x = x, y = y, col = type, linetype = type)) +
geom_step(size = 1) +
geom_line(data = curve_df, size = 1) +
scale_color_manual(values = c("black", "blue", "green", "red")) +
scale_linetype_manual(values = c("solid", "dashed", "dashed", "dashed")) +
labs(title = "ECDF Plot", x = "Value", y = "ECDF") +
theme_bw() +
theme(legend.title = element_blank(),
legend.position = "bottomright",
legend.key.size = unit(1.2, "lines"),
legend.text = element_text(size = 9)) +
geom_hline(yintercept = 1, linetype = "dotted", color = "black", size = 1)
library(Weibull)
# Combine data frames
all_df <- rbind(tboot_df, dt_df) %>%
mutate(y = ecdf(x)(x), type = factor(type, levels = c("tboot_dist", "True distribution")))
curve_df <- rbind(edge_df, pnorm_df) %>%
mutate(type = factor(type, levels = c("Edgeworth expansion", "Normal approximation")))
ggplot() +
geom_step(data = all_df, aes(x = x, y = y, col = type, linetype = type), size = 1) +
geom_line(data = curve_df, aes(x = x, y = y, col = type, linetype = type), size = 1) +
scale_color_manual(values = c("black", "blue", "green", "red")) +
scale_linetype_manual(values = c("solid", "dashed", "dashed", "dashed")) +
labs(title = "ECDF Plot", x = "Value", y = "ECDF") +
theme_bw() +
theme(legend.title = element_blank(),
legend.position = "bottomright",
legend.key.size = unit(1.2, "lines"),
legend.text = element_text(size = 9)) +
geom_hline(yintercept = 1, linetype = "dotted", color = "black", size = 1)
# Combine data frames
all_df <- rbind(tboot_df, dt_df) %>%
mutate(y = ecdf(x)(x), type = factor(type, levels = c("tboot_dist", "True distribution")))
curve_df <- rbind(edge_df, pnorm_df) %>%
mutate(type = factor(type, levels = c("Edgeworth expansion", "Normal approximation")))
# Create ggplot
plot <- ggplot() +
geom_step(data = all_df, aes(x = x, y = y, col = type, linetype = type), size = 1) +
geom_line(data = curve_df, aes(x = x, y = y, col = type, linetype = type), size = 1) +
scale_color_manual(values = c("black", "blue", "green", "red")) +
scale_linetype_manual(values = c("solid", "dashed", "dashed", "dashed")) +
labs(title = "ECDF Plot", x = "Value", y = "ECDF") +
theme_bw() +
theme(legend.position = "none") +
geom_hline(yintercept = 1, linetype = "dotted", color = "black", size = 1)
# Custom legend
legend_labels <- c("tboot_dist", "True distribution", "Edgeworth expansion", "Normal approximation")
legend_colors <- c("black", "blue", "green", "red")
legend_linetypes <- c("solid", "dashed", "dashed", "dashed")
for (i in seq_along(legend_labels)) {
plot <- plot +
annotate("text", x = -3.5, y = 0.1 * i, label = legend_labels[i], size = 4, hjust = 0, color = legend_colors[i]) +
geom_label(data = data.frame(x = -4.2, y = 0.1 * i), aes(x = x, y = y),
label = "", size = 0, linetype = legend_linetypes[i], color = legend_colors[i])
}
# Combine data frames
all_df <- rbind(tboot_df, dt_df) %>%
mutate(y = ecdf(x)(x), type = factor(type, levels = c("tboot_dist", "True distribution")))
curve_df <- rbind(edge_df, pnorm_df) %>%
mutate(type = factor(type, levels = c("Edgeworth expansion", "Normal approximation")))
full_df <- rbind(all_df, curve_df)
# Create ggplot
ggplot(full_df, aes(x = x, y = y, col = type, linetype = type)) +
geom_step(data = all_df, size = 1) +
geom_line(data = curve_df, size = 1) +
scale_color_manual(values = c("black", "blue", "green", "red")) +
scale_linetype_manual(values = c("solid", "dashed", "dashed", "dashed")) +
labs(title = "ECDF Plot", x = "Value", y = "ECDF") +
theme_bw() +
theme(legend.title = element_blank(),
legend.position = "bottomright",
legend.key.size = unit(1.2, "lines"),
legend.text = element_text(size = 9)) +
geom_hline(yintercept = 1, linetype = "dotted", color = "black", size = 1)
setwd("C:/Users/Piotr/Desktop/R/boodd/boodd")
library(boodd)
source("C:/Users/Piotr/Desktop/R/tboot_dist.R")
set.seed(54321);
m=0
n=40;
X=exp(rnorm(n,mean=m));
mv=function(X){
c(mean(X),(n-1)*var(X)/n**2)}
truemean=exp(m+1/2)
truevar=exp(2*m+1)*(exp(1)-1)
truek3=(exp(1)+2)*sqrt(exp(1)-1)
# generate a Monte-Calo approximation of the true distribution of the t
dt=c()
for (i in 1:9999){
X0=exp(rnorm(n,mean=m))
est=mv(X0);
dt[i]=(est[1]-truemean)/sqrt(est[2])
}
# compute the Bootstrap distribution of mean and variance of the mean
resb=boots(X,mv,B=999)
# edge is the edgeworth expansion for the t-distribution of the mean
edge=function(x){ pnorm(x)+truek3/6*(2*x**2+1)*dnorm(x)/sqrt(n)}
plot(ecdf(tboot_dist(resb,1)),do.points=FALSE)
# add the plot of true distribution in blue
plot(ecdf(dt),add=TRUE, col="blue")
# add the Edgeworth expansion in green
curve(edge(x),from=-4,to=4,add=TRUE,col="green")
# add the normal approximation in red
curve(pnorm(x),from=-4,to=4,add=TRUE,col="red")
# Create the plots
par(mar = c(5, 5, 4, 2) + 0.1)  # Adjust margins
plot(ecdf(tboot_dist(resb, 1)), do.points = FALSE, main = "", xlab = "", ylab = "", col = "black", lwd = 2,ylim = c(0, 1.1))
plot(ecdf(dt), add = TRUE, col = "blue", lwd = 2, lty = 2)
curve(edge(x), from = -4, to = 4, add = TRUE, col = "green", lwd = 2)
curve(pnorm(x), from = -4, to = 4, add = TRUE, col = "red", lwd = 2)
legend("topleft", legend = c("tboot_dist", "True distribution", "Edgeworth expansion", "Normal approximation"), col = c("black", "blue", "green", "red"), lty = c(1, ), lwd = 2, cex = 0.8)
legend("topleft", legend = c("tboot_dist", "True distribution", "Edgeworth expansion", "Normal approximation"), col = c("black", "blue", "green", "red"), lty = c(1, ), lwd = 2, cex = 0.8)
legend("topleft", legend = c("tboot_dist", "True distribution", "Edgeworth expansion", "Normal approximation"), col = c("black", "blue", "green", "red"), lty = c(1,1,1,1 ), lwd = 2, cex = 0.8)
legend("topleft", legend = c("tboot_dist", "True distribution", "Edgeworth expansion", "Normal approximation"), col = c("black", "blue", "green", "red"), lty = c(1,1,1,1 ), lwd = 2, cex = 1)
legend("topleft", legend = c("tboot_dist", "True distribution", "Edgeworth expansion", "Normal approximation"), col = c("black", "blue", "green", "red"), lty = c(1,1,1,1 ), lwd = 2, cex = 0.9)
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Calculate t-bootstrap distribution values
tboot_values <- tboot_dist(resb, 1, PLT = FALSE)
# Create a data frame for each line
tboot_df <- data.frame(x = tboot_values, type = "tboot_dist")
dt_df <- data.frame(x = dt, type = "True distribution")
edge_df <- data.frame(x = seq(-4, 4, by = 0.01))
edge_df$y <- edge(edge_df$x)
edge_df$type <- "Edgeworth expansion"
pnorm_df <- data.frame(x = seq(-4, 4, by = 0.01))
pnorm_df$y <- pnorm(pnorm_df$x)
pnorm_df$type <- "Normal approximation"
# Combine data frames
all_df <- rbind(tboot_df, dt_df) %>%
mutate(y = ecdf(x)(x), type = factor(type, levels = c("tboot_dist", "True distribution")))
curve_df <- rbind(edge_df, pnorm_df) %>%
mutate(type = factor(type, levels = c("Edgeworth expansion", "Normal approximation")))
full_df <- rbind(all_df, curve_df)
# Create ggplot
ggplot(full_df, aes(x = x, y = y, col = type, linetype = type)) +
geom_step(data = all_df, size = 1) +
geom_line(data = curve_df, size = 1) +
scale_color_manual(values = c("black", "blue", "green", "red")) +
scale_linetype_manual(values = c("solid", "dashed", "dashed", "dashed")) +
labs(title = "ECDF Plot", x = "Value", y = "ECDF") +
theme_bw() +
theme(legend.title = element_blank(),
legend.position = "bottomright",
legend.key.size = unit(1.2, "lines"),
legend.text = element_text(size = 9)) +
geom_hline(yintercept = 1, linetype = "dotted", color = "black", size = 1)
# Create the plots
par(mar = c(5, 5, 4, 2) + 0.1)  # Adjust margins
plot(ecdf(tboot_dist(resb, 1)), do.points = FALSE, main = "", xlab = "", ylab = "", col = "black", lwd = 2,ylim = c(0, 1.1))
plot(ecdf(dt), add = TRUE, col = "blue", lwd = 2, lty = 2)
curve(edge(x), from = -4, to = 4, add = TRUE, col = "green", lwd = 2)
curve(pnorm(x), from = -4, to = 4, add = TRUE, col = "red", lwd = 2)
legend("topleft", legend = c("tboot_dist", "True distribution", "Edgeworth expansion", "Normal approximation"), col = c("black", "blue", "green", "red"), lty = c(1,1,1,1 ), lwd = 2, cex = 0.9)
plot(ecdf(tboot_dist(resb, 1)), do.points = FALSE, main = "", xlab = "", ylab = "", col = "black", lwd = 2,ylim = c(0, 1.1))
plot(ecdf(dt), add = TRUE, col = "blue", lwd = 2, lty = 1)
curve(edge(x), from = -4, to = 4, add = TRUE, col = "green", lwd = 1)
curve(pnorm(x), from = -4, to = 4, add = TRUE, col = "red", lwd = 1)
# Create the plots
par(mar = c(5, 5, 4, 2) + 0.1)  # Adjust margins
plot(ecdf(tboot_dist(resb, 1)), do.points = FALSE, main = "", xlab = "", ylab = "", col = "black", lwd = 2,ylim = c(0, 1.1))
plot(ecdf(dt), add = TRUE, col = "blue", lwd = 2, lty = 1)
curve(edge(x), from = -4, to = 4, add = TRUE, col = "green", lwd = 2)
curve(pnorm(x), from = -4, to = 4, add = TRUE, col = "red", lwd = 2)
curve(edge(x), from = -4, to = 4, add = TRUE, col = "green", lwd = 2,  lty = 2)
# Create the plots
par(mar = c(5, 5, 4, 2) + 0.1)  # Adjust margins
plot(ecdf(tboot_dist(resb, 1)), do.points = FALSE, main = "", xlab = "", ylab = "", col = "black", lwd = 2,ylim = c(0, 1.1))
plot(ecdf(dt), add = TRUE, col = "blue", lwd = 2, lty = 2)
curve(edge(x), from = -4, to = 4, add = TRUE, col = "green", lwd = 2,  lty = 2)
curve(pnorm(x), from = -4, to = 4, add = TRUE, col = "red", lwd = 2, lty = 2)
legend("topleft", legend = c("tboot_dist", "True distribution", "Edgeworth expansion", "Normal approximation"), col = c("black", "blue", "green", "red"), lty = c(1,1,1,1 ), lwd = 2, cex = 0.9)
legend("topleft", legend = c("tboot_dist", "True distribution", "Edgeworth expansion", "Normal approximation"), col = c("black", "blue", "green", "red"), lty = c(1,1,2,2 ), lwd = 2, cex = 0.9)
library(rootSolve)
library(Weibull)
theta= 0.5 #mean of poisson distribution
#------------------------------------------------------------
#Claim cost distribution is Weibull(beta,c)
#------------------------------------------------------------
beta=0.5
c=2
ro=0.1
p=ro/(1+ro)
mu=c*gamma(1/beta+1)
#------------------------------------------------------------
# the decrease in the probability of ruin as a function of capital
#index=1
Y=list()
X=seq(70,120,1)
beta=1/2
c=2
K=10^5 #10^5 #10^6 #number of simulations
#u=70
for (j in X){
counter=0
for (i in 1:K){
J <- rgeom(1,p)
Z_j <- rgamma(J,shape=1/beta,scale=1)
X_j <- c*(Z_j)^(1/beta)
S <- sum(X_j)
if(S>j){
counter=counter+1
}
}
estimator=counter/K
Y=append(Y,estimator)
}
Y=as.numeric(Y)
plot(X,Y)
plot(X,log(Y),xlab = 'initial capital', ylab='log(ruin probability)')
lm_c <- lm((log(Y)-(1-beta)*log(X))~sqrt(X))
lm_c
theta= 0.5 #mean of poisson distribution
#------------------------------------------------------------
#Claim cost distribution is Weibull(beta,c)
#------------------------------------------------------------
beta=0.5
c=2
ro=0.4
p=ro/(1+ro)
mu=c*gamma(1/beta+1)
#------------------------------------------------------------
# the decrease in the probability of ruin as a function of capital
#index=1
Y=list()
X=seq(70,120,1)
beta=1/2
c=2
K=10^5 #10^5 #10^6 #number of simulations
#u=70
for (j in X){
counter=0
for (i in 1:K){
J <- rgeom(1,p)
Z_j <- rgamma(J,shape=1/beta,scale=1)
X_j <- c*(Z_j)^(1/beta)
S <- sum(X_j)
if(S>j){
counter=counter+1
}
}
estimator=counter/K
Y=append(Y,estimator)
}
Y=as.numeric(Y)
plot(X,Y)
plot(X,log(Y),xlab = 'initial capital', ylab='log(ruin probability)')
lm_c <- lm((log(Y)-(1-beta)*log(X))~sqrt(X))
lm_c
theta= 0.5 #mean of poisson distribution
#------------------------------------------------------------
#Claim cost distribution is Weibull(beta,c)
#------------------------------------------------------------
beta=0.5
c=2
ro=0.1
p=ro/(1+ro)
mu=c*gamma(1/beta+1)
#------------------------------------------------------------
# the decrease in the probability of ruin as a function of capital
#index=1
Y=list()
X=seq(70,120,1)
beta=1/2
c=2
K=10^5 #10^5 #10^6 #number of simulations
#u=70
for (j in X){
counter=0
for (i in 1:K){
J <- rgeom(1,p)
Z_j <- rgamma(J,shape=1/beta,scale=1)
X_j <- c*(Z_j)^(1/beta)
S <- sum(X_j)
if(S>j){
counter=counter+1
}
}
estimator=counter/K
Y=append(Y,estimator)
}
Y=as.numeric(Y)
plot(X,Y)
plot(X,log(Y),xlab = 'initial capital', ylab='log(ruin probability)')
lm_c <- lm((log(Y)-(1-beta)*log(X))~sqrt(X))
lm_c
abline(a=lm_c$coefficients[1],b=lm_c$coefficients[2])
plot(X,log(Y),xlab = 'initial capital', ylab='log(ruin probability)')
abline(a=lm_c$coefficients[1],b=lm_c$coefficients[2])
lm_c$coefficients
lm_c$coefficients[1]
lm_c$coefficients[2]+2
lm_c$coefficients[2]
abline(a=lm_c$coefficients[1],b=lm_c$coefficients[2])
plot(X,log(Y),xlab = 'initial capital', ylab='log(ruin probability)')
abline(a=lm_c$coefficients[1],b=lm_c$coefficients[2])
plot(X,Y)
abline(a=lm_c$coefficients[1],b=lm_c$coefficients[2])
plot(X,log(Y),xlab = 'initial capital', ylab='log(ruin probability)')
abline(a=lm_c$coefficients[1],b=lm_c$coefficients[2])
